# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
  token: String!
}

input CommentCreateManyAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  postId: String!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyPostInput {
  authorId: String!
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateNestedOneWithoutCommentInput!
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostRelationFilter
  postId: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

input CreatePostInput {
  content: String!
  title: String!
}

input CreateProfileInput {
  bio: String
  firstName: String
  lastName: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  adminCreateOneUser(data: UserCreateInput!): user!
  adminDeleteOneUser(where: UserWhereUniqueInput!): user!
  adminUpsertOneUser(data: UserCreateInput!): user!
  changePassword(data: ChangePasswordInput!): user!
  createPost(data: CreatePostInput!): Post!
  createProfile(data: CreateProfileInput!): profile!
  deleteAccount: user!
  login(data: LoginUserInput!): Auth!
  register(data: RegisterUserInput!): user!
  updateAccount(data: UpdateUserInput!): user!
  updateProfile(data: UpdateProfileInput!, where: ProfileWhereUniqueInput!): profile!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
  username: String!
}

input ProfileOrderByWithRelationInput {
  bio: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  username: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringNullableFilter
  username: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
  userId: String
  username: String
}

type Query {
  adminCountManyUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): Int!
  adminFindFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): user!
  adminFindManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [user!]!
  adminFindUniqueUser(where: UserWhereUniqueInput!): user!
  me: user!
  posts: [Post!]!
  profile(where: UserWhereUniqueInput!): profile!
  profileCurrentUser: profile!
}

enum QueryMode {
  default
  insensitive
}

input RegisterUserInput {
  email: String!
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input UpdateProfileInput {
  bio: String
  firstName: String
  lastName: String
  username: String
}

input UpdateUserInput {
  currentHashedRefreshToken: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserNestedInput
}

input UserCreateInput {
  Comment: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  currentHashedRefreshToken: String
  email: String!
  id: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentInput {
  createdAt: DateTime
  currentHashedRefreshToken: String
  email: String!
  id: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  Comment: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  currentHashedRefreshToken: String
  email: String!
  id: String
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  updatedAt: DateTime
}

input UserOrderByWithRelationInput {
  Comment: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  currentHashedRefreshToken: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  profile: ProfileOrderByWithRelationInput
  role: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  currentHashedRefreshToken
  email
  id
  password
  role
  updatedAt
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Comment: CommentListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  currentHashedRefreshToken: StringNullableFilter
  email: StringFilter
  id: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
  profile: ProfileRelationFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type profile {
  bio: String
  createdAt: DateTime!
  firstName: String
  id: ID!
  lastName: String
  updatedAt: DateTime!
  user: user
  username: String
}

type user {
  createdAt: DateTime!
  email: String!
  id: ID!
  role: String!
  updatedAt: DateTime!
}